import sounddevice as sd
import numpy as np
import time
import random

# –ß–∞—Å—Ç–æ—Ç–∏ –Ω–æ—Ç –¥–ª—è –∞–∫–æ—Ä–¥—ñ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é–≤–∞–Ω–Ω—è)
chord_frequencies = {
    "C": [261.63, 329.63, 392.00],  # C, E, G
    "G": [196.00, 246.94, 392.00],  # G, B, D
    "D": [146.83, 293.66, 392.00],  # D, F#, A
    "Am": [220.00, 261.63, 440.00], # A, C, E
    "E": [164.81, 329.63, 659.25],  # E, G#, B
    "F": [174.61, 349.23, 440.00],  # F, A, C
}

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—É–∫—É –∞–∫–æ—Ä–¥—É
def generate_chord(frequencies, duration=2, sample_rate=44100):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    chord = sum(np.sin(2 * np.pi * freq * t) for freq in frequencies)
    return chord * 0.5  # –ó–º–µ–Ω—à–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ

# –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫–æ—Ä–¥—É
def play_chord(chord):
    sd.play(chord, samplerate=44100)
    sd.wait()

# –¢–∞–±—É–ª–∞—Ç—É—Ä–∞ –∞–∫–æ—Ä–¥—ñ–≤
chords = {
    "C": "e|-0-\nB|-1-\nG|-0-\nD|-2-\nA|-3-\nE|-X-\n",
    "G": "e|-3-\nB|-0-\nG|-0-\nD|-0-\nA|-2-\nE|-3-\n",
    "D": "e|-2-\nB|-3-\nG|-2-\nD|-0-\nA|-X-\nE|-X-\n",
    "Am": "e|-0-\nB|-1-\nG|-2-\nD|-2-\nA|-0-\nE|-X-\n",
    "E": "e|-0-\nB|-0-\nG|-1-\nD|-2-\nA|-2-\nE|-0-\n",
    "F": "e|-1-\nB|-1-\nG|-2-\nD|-3-\nA|-3-\nE|-1-\n",
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
def guitar_trainer():
    print("üé∏ –í—ñ—Ç–∞—é —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ –≥—Ä–∏ –Ω–∞ –≥—ñ—Ç–∞—Ä—ñ! üé∂")
    print("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:")
    print("1. –í–∏–≤—á–∏—Ç–∏ –∞–∫–æ—Ä–¥")
    print("2. –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∞–∫–æ—Ä–¥—ñ–≤")
    print("3. –í–∏–π—Ç–∏")

    while True:
        choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä (1-3): ")
        if choice == "1":
            chord_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–∫–æ—Ä–¥—É (C, G, D, Am, E, F): ").strip()
            if chord_name in chords:
                print(f"\n–¢–∞–±—É–ª–∞—Ç—É—Ä–∞ –¥–ª—è –∞–∫–æ—Ä–¥—É {chord_name}:\n")
                print(chords[chord_name])
                if chord_name in chord_frequencies:
                    print("üéµ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –∞–∫–æ—Ä–¥—É...")
                    chord = generate_chord(chord_frequencies[chord_name])
                    play_chord(chord)
                else:
                    print("‚õî –î–ª—è —Ü—å–æ–≥–æ –∞–∫–æ—Ä–¥—É –Ω–µ–º–∞—î —á–∞—Å—Ç–æ—Ç.")
            else:
                print("‚õî –ê–∫–æ—Ä–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        elif choice == "2":
            print("\n–ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∞–∫–æ—Ä–¥—ñ–≤. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É.\n")
            try:
                while True:
                    chord_name = random.choice(list(chords.keys()))
                    print(f"–ó—ñ–≥—Ä–∞–π—Ç–µ –∞–∫–æ—Ä–¥ {chord_name}!")
                    print(chords[chord_name])
                    if chord_name in chord_frequencies:
                        chord = generate_chord(chord_frequencies[chord_name])
                        play_chord(chord)
                    else:
                        print("‚õî –î–ª—è —Ü—å–æ–≥–æ –∞–∫–æ—Ä–¥—É –Ω–µ–º–∞—î —á–∞—Å—Ç–æ—Ç.")
                    time.sleep(2)
            except KeyboardInterrupt:
                print("\nüé∏ –ü—Ä–∞–∫—Ç–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        elif choice == "3":
            print("üé∂ –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! –£—Å–ø—ñ—Ö—ñ–≤ —É –≥—Ä—ñ –Ω–∞ –≥—ñ—Ç–∞—Ä—ñ! üéµ")
            break
        else:
            print("‚õî –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
guitar_trainer()
